package com.quipu.advent_of_code;


import static java.lang.Integer.parseInt;
import static java.lang.String.valueOf;

class Day1 {

    private final String INPUT =


    Day1 runPart1() {
        int result = runPart1(INPUT);
        System.out.println("Part 1. Sum of digits equals ".concat(String.valueOf(result)));
        return this;
    }

    Day1 runPart2() {
        int result = runPart2(INPUT);
        System.out.println("Part 2. Sum of digits equals ".concat(String.valueOf(result)));
        return this;
    }

    private int runPart1(String input) {
        return calculateDigitsSum(input, 1);
    }

    private int runPart2(String input) {
        return calculateDigitsSum(input, input.length() / 2);
    }

    private int calculateDigitsSum(String input, int compareStep) {
        int result = 0;
        String digits = input.concat(input);
        for (int i = 0; i < input.length(); i++) {
            if (digits.charAt(i) == digits.charAt(i + compareStep)) {
                result += parseInt(valueOf(digits.charAt(i)));
            }
        }
        return result;
    }

    Day1 runPart1Test() {
        runPart1TestCase("1122", 3);
        runPart1TestCase("1111", 4);
        runPart1TestCase("1234", 0);
        runPart1TestCase("91212129", 9);
        System.out.println("Test success!");
        return this;
    }

    Day1 runPart2Test() {
        runPart2TestCase("1212", 6);
        runPart2TestCase("1221", 0);
        runPart2TestCase("123425", 4);
        runPart2TestCase("123123", 12);
        runPart2TestCase("12131415", 4);
        System.out.println("Test success!");
        return this;
    }

    private void runPart1TestCase(String input, int expectedResult) {
        int result = runPart1(input);
        if (result != expectedResult) {
            throw new AssertionError(String.format("%s should return %d but was %d", input, expectedResult, result));
        }
    }

    private void runPart2TestCase(String input, int expectedResult) {
        int result = runPart2(input);
        if (result != expectedResult) {
            throw new AssertionError(String.format("%s should return %d but was %d", input, expectedResult, result));
        }
    }
}

